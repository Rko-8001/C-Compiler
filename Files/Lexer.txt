TYPE: int
ID: a 
SEMI: ;
TYPE: int
ID: add 
RIGHT_PARANTHESIS: (
TYPE: int
ID: a 
COMMA: ,
TYPE: int
ID: b 
LEFT_PARANTHESIS: )
SEMI: ;
TYPE: int
ID: add 
RIGHT_PARANTHESIS: (
LEFT_PARANTHESIS: )
SEMI: ;
TYPE: int
ID: main 
RIGHT_PARANTHESIS: (
TYPE: int
ID: c 
COMMA: ,
TYPE: int
ID: d 
LEFT_PARANTHESIS: )
RIGHT_CURLY_BRACKET: {
TYPE: int
ID: a 
SEMI: ;
TYPE: char *
ID: b 
SEMI: ;
IF: if
RIGHT_PARANTHESIS: (
ID: a 
RELATIONAL_OPERATOR: <=
NUM: 2
LEFT_PARANTHESIS: )
RIGHT_CURLY_BRACKET: {
TYPE: int
ID: b 
ASSIGN: =
ID: c 
SEMI: ;
LEFT_CURLY_BRACKET: }
ELSE: else
RIGHT_CURLY_BRACKET: {
TYPE: int
ID: c 
ASSIGN: =
ID: d 
SEMI: ;
RETURN: return
SEMI: ;
LEFT_CURLY_BRACKET: }
WHILE: while
RIGHT_PARANTHESIS: (
ID: s 
RELATIONAL_OPERATOR: >
NUM: 2
LEFT_PARANTHESIS: )
RIGHT_CURLY_BRACKET: {
TYPE: int
ID: a 
SEMI: ;
RETURN: return
ID: a 
SEMI: ;
LEFT_CURLY_BRACKET: }
ID: add 
RIGHT_PARANTHESIS: (
ID: a 
LEFT_PARANTHESIS: )
SEMI: ;
ID: add 
RIGHT_PARANTHESIS: (
ID: x 
COMMA: ,
ID: y 
LEFT_PARANTHESIS: )
SEMI: ;
ID: add 
RIGHT_PARANTHESIS: (
NUM: 2
COMMA: ,
NUM: 3
PLUS: +
NUM: 4
LEFT_PARANTHESIS: )
SEMI: ;
RETURN: return
SEMI: ;
TYPE: int
ID: b 
ASSIGN: =
NUM: 4
PLUS: +
ID: c 
SEMI: ;
RETURN: return
SEMI: ;
LEFT_CURLY_BRACKET: }
